<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:local="*"
		 creationComplete="initApp()"
		 width="400" height="300">
	<mx:VBox id="container" paddingLeft="60" paddingTop="60">
		<mx:HBox id="titleContainer" width="100%">
			<mx:Label text="Media player" styleName="title" />
		</mx:HBox>
		<mx:Spacer height="20" />
		<mx:HBox>
			<mx:VBox horizontalAlign="center">
				<mx:VBox backgroundColor="#333333" verticalGap="0" horizontalAlign="center">
					<mx:VBox id="videoContainer" paddingLeft="5" paddingTop="5" backgroundColor="#242424" 
							 width="491" height="281" verticalScrollPolicy="off" horizontalScrollPolicy="off" 
							 horizontalAlign="center">
						<mx:UIComponent id="uic" visible="false" />
					</mx:VBox>
					<mx:HRule width="100%" strokeColor="black" strokeWidth="1" />
					<mx:HBox paddingLeft="6" paddingTop="3" paddingBottom="3">
						<mx:Button id="playBtn" label="pause" click="onClickPlay(event)" enabled="false" 
								   useHandCursor="true" buttonMode="true" />
						<mx:VBox verticalAlign="middle">
							<mx:HSlider id="scrubber" width="291" allowTrackClick="true" enabled="false" 
										dataTipFormatFunction="showScrubTime" 
										thumbPress="toggleDragging(true)" thumbRelease="toggleDragging(false)" />
						</mx:VBox>
						
						<mx:Text id="timeDisplay" text="00:00|00:00" />
					</mx:HBox>
				</mx:VBox>
			</mx:VBox>
			<mx:Spacer width="10" />
		</mx:HBox>
	</mx:VBox>
	
	<mx:TextArea wordWrap="true" id="captionLabel" styleName="captionStyle"
				 width="489" borderStyle="none" horizontalScrollPolicy="off" verticalScrollPolicy="off" visible="false"/>							
	
	
	
	<fx:Script>
		<![CDATA[	
			import flash.events.NetStatusEvent;
			
			import mx.collections.*;
			import mx.controls.Alert;
			import mx.controls.textClasses.TextRange;
			
			import org.openvideoplayer.cc.*;
			import org.openvideoplayer.events.*;
			import org.openvideoplayer.net.*;
			
			private var _video:Video;
			private var _nc:OvpConnection;
			private var _ns:OvpNetStream;
			private var _scrubberDragging:Boolean;
			private var _playBtnStatePlaying:Boolean;
			private var _waitForSeek:Boolean;
			private var _streamLength:Number;
			private var _ccMgr:OvpCCManager;
			private var _captionTimer:Timer;
			private var _ccOn:Boolean;
			private var _ccPositioned:Boolean;
			
			private var _hostName:String;
			private var _streamName:String;
			
			/* private const _HOSTNAME_:String = "cp67126.edgefcs.net/ondemand";
			private const _STREAMNAME_:String = "mediapm/ovp/content/test/video/Akamai_10_Year_F8_512K"; */
			//private const _CAPTION_URL_:String = "../../data/caption/sample_caption.xml";
			
			// Initialize the application

			public function get streamName():String
			{
				return _streamName;
			}

			public function set streamName(value:String):void
			{
				_streamName = value;
				_nc.connect( null);
			}

			private function initApp():void {
				_scrubberDragging = false;
				_playBtnStatePlaying = false;
				_waitForSeek = false;
				_streamLength = 0;
				_ccOn = true;
				_ccPositioned = false;
				
				// Create the connection object and add the necessary event listeners
				_nc = new OvpConnection();
				_nc.addEventListener(OvpEvent.ERROR, errorHandler);
				_nc.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
				_nc.addEventListener(OvpEvent.STREAM_LENGTH,streamLengthHandler); 
				
				
				uic.setActualSize(480,270);
				_video = new Video(480,270);
				_video.x = 0;
				_video.y = 0;
				uic.addChild(_video);
				
				/* _captionTimer = new Timer(10000);
				_captionTimer.addEventListener(TimerEvent.TIMER, onCaptionTimer); */
				
				//_nc.connect(null);	
			}
			
			
			// Perform a seek operation
			private function doSeek():void {
				//hideCaption();
				_ns.seek(scrubber.value);
			}
			
			
			
			// Starts the video playing when everything is ready
			private function playVideo(name:String):void {
				_playBtnStatePlaying = true;
				playBtn.label = "pause";
				_ccMgr.enableCuePoints(_ccOn);
				_ns.play(name);
			}
			
			private function showScrubTime(val:String):String {
				var sec:Number = Number(val);
				var h:Number = Math.floor(sec/3600);
				var m:Number = Math.floor((sec%3600)/60);
				var s:Number = Math.floor((sec%3600)%60);
				return (h == 0 ? "":(h<10 ? "0"+h.toString()+":" : h.toString()+":"))+(m<10 ? "0"+m.toString() : m.toString())+":"+(s<10 ? "0"+s.toString() : s.toString());
			}
			
			// This method is called from the netStatusHandler below when we receive a good connection		
			private function connectedHandler():void {
				trace("Successfully connected to: " + _nc.netConnection.uri);
				playBtn.enabled = true;
				
				// Instantiate an OvpNetStream object
				_ns = new OvpNetStream(_nc);
				
				// Add the necessary listeners
				_ns.addEventListener(NetStatusEvent.NET_STATUS, streamStatusHandler);
				_ns.addEventListener(OvpEvent.NETSTREAM_PLAYSTATUS, streamPlayStatusHandler);
				_ns.addEventListener(OvpEvent.NETSTREAM_METADATA, metadataHandler);
				_ns.addEventListener(OvpEvent.PROGRESS, update);
				
				// Create the closed captioning object and give it the net stream
				/* _ccMgr = new OvpCCManager(_ns);
				_ccMgr.addEventListener(OvpEvent.ERROR, errorHandler);		
				_ccMgr.addEventListener(OvpEvent.CAPTION, captionHandler);
				_ccMgr.parse(_CAPTION_URL_); */
				
				// Give the video object our net stream object
				_video.attachNetStream(_ns);
				
				trace("Port: " + _nc.actualPort);
				trace("Protocol: " + _nc.actualProtocol);
				trace("IP address: " + _nc.serverIPaddress);
				
				// Request stream length
				_nc.requestStreamLength(_streamName);						
			}
			
			//-------------------------------------------------------------------
			//
			// Event Handlers
			//
			//-------------------------------------------------------------------
			
			/* private function onCaptionTimer(e:TimerEvent):void {
				trace("******* onCaptionTimer *********");
				this.hideCaption();
			} */
			
			// Receives caption events dispatched by OvpCCManager class
			/* private function captionHandler(e:OvpEvent):void {
				if (e && e.data && (e.data is Caption)) {
					hideCaption();
					showCaption(Caption(e.data));				
				}
			} */
			
			// Handles the OvpEvent.PROGRESS event fired by the OvpNetStream class
			private function update(e:OvpEvent):void {
				timeDisplay.text =  _ns.timeAsTimeCode + "|"+ _nc.streamLengthAsTimeCode(_streamLength);
				if (!_scrubberDragging && !_waitForSeek) {
					scrubber.value=_ns.time;
				}
			}
			
			// Handles all OvpEvent.ERROR events
			private function errorHandler(e:OvpEvent):void {
				Alert.show("Error #" + e.data.errorNumber+": " + e.data.errorDescription, "ERROR", Alert.OK);
			}
			
			// Handles NetStatusEvent.NET_STATUS events fired by the OvpConnection class
			private function netStatusHandler(e:NetStatusEvent):void {
				trace(e.info.code);
				switch (e.info.code) {
					case "NetConnection.Connect.Rejected":
						trace("Rejected by server. Reason is "+e.info.description);
						break;
					case "NetConnection.Connect.Success":
						connectedHandler();
						break;
				}
			}
			
			// Handles the NetStatusEvent.NET_STATUS events fired by the OvpNetStream class			
			private function streamStatusHandler(e:NetStatusEvent):void {
				trace("streamStatusHandler() - event.info.code="+e.info.code);
				switch(e.info.code) {
					case "NetStream.Buffer.Full":
						// _waitForSeek is used to stop the scrubber from updating
						// while the stream transtions after a seek
						_waitForSeek = false;
						break;
				}
			}
			
			// Handles the OvpEvent.NETSTREAM_PLAYSTATUS events fired by the OvpNetStream class
			private function streamPlayStatusHandler(e:OvpEvent):void {				
				trace("streamPlayStatusHandler() - e.data.code="+e.data.code);
				switch(e.data.code) {
					case "NetStream.Play.Complete":
						//_playBtnStatePlaying = false;
						//_captionTimer.stop();
						//playBtn.label = "play";
						playVideo(_streamName);
						break;				
				}
			}
			
			private function positionCaption():void {
				// only need to do this once
				if (!_ccPositioned) {
					_ccPositioned = true;
					var pt:Point = videoContainer.contentToGlobal(new Point(videoContainer.x, videoContainer.y));
					pt = captionLabel.globalToContent(pt);
					captionLabel.x = pt.x + 5;
					captionLabel.y = pt.y + videoContainer.height - captionLabel.height - 6;			
				}
			}
			
			// Handles the OvpEvent.NETSTREAM_METADATA events fired by the OvpNetStream class	
			private function metadataHandler(e:OvpEvent):void {
				for (var propName:String in e.data) {
					trace("metadata: "+propName+" = "+e.data[propName]);
				}
				_video.x = 0;
				_video.y = 0;
				_video.width = e.data.width;
				uic.width = e.data.width + 6;
				_video.height = e.data.height;
				uic.height = e.data.height + 6;	
				uic.visible = true;
				
				videoContainer.width = e.data.width + 11;
				videoContainer.height = e.data.height + 11;	
				
				positionCaption();
				captionLabel.width = e.data.width;			
			}
			
			// Handles scrubber events (an HSlider object)
			private function toggleDragging(state:Boolean):void {
				_scrubberDragging = state;
				if (!state) {
					_waitForSeek = true;
					doSeek();
				}
			}
			
			// Handles play button events
			private function onClickPlay(event:MouseEvent):void {			
				if (_playBtnStatePlaying) {
					//this._captionTimer.stop();
					_ns.pause();
					playBtn.label = "play";
				}
				else {
					//this._captionTimer.start();
					_ns.resume();
					playBtn.label = "pause";
				}
				_playBtnStatePlaying = !_playBtnStatePlaying;			
			}
			
			private function streamLengthHandler(e:OvpEvent):void {
				trace("Stream length is " + e.data.streamLength);
				scrubber.maximum = e.data.streamLength;
				scrubber.enabled = true;
				_streamLength = e.data.streamLength;
				playVideo(_streamName);
			}
		]]>
	</fx:Script>	

</s:Group>
